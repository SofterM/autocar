'use client';

import React, { useState, useEffect } from 'react';
import { Calendar, Clock, CheckCircle, Car, User } from 'lucide-react';

interface UserProfile {
  id: number;
  email: string;
  first_name: string;
  last_name: string;
  phone: string;
}

export default function AppointmentPage() {
  const [selectedService, setSelectedService] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedTime, setSelectedTime] = useState('');
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [carInfo, setCarInfo] = useState({
    brand: '',
    model: '',
    year: '',
    licensePlate: '',
    problemDescription: ''
  });

  // Fetch user profile when component mounts
  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        const response = await fetch('/api/users');
        if (!response.ok) {
          throw new Error('Failed to fetch user profile');
        }
        const data = await response.json();
        // Assuming the API returns an array and we want the first user
        setUserProfile(data[0]);
      } catch (error) {
        console.error('Error fetching user profile:', error);
      }
    };

    fetchUserProfile();
  }, []);

  const services = [
    {
      name: '‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
      icon: 'üîç',
      description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏£‡∏ñ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'
    },
    {
      name: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
      icon: 'üîß',
      description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡πà‡∏≠‡∏•‡∏∑‡πà‡∏ô'
    },
    {
      name: '‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î',
      icon: '‚ö°',
      description: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á'
    },
    {
      name: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏∞‡∏¢‡∏∞',
      icon: 'üìä',
      description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î'
    },
    {
      name: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡πà‡∏ß‡∏ô',
      icon: 'üèÉ',
      description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏î‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô'
    },
    {
      name: '‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ö‡∏£‡∏Å',
      icon: 'üõë',
      description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ö‡∏£‡∏Å ‡∏ú‡πâ‡∏≤‡πÄ‡∏ö‡∏£‡∏Å ‡∏à‡∏≤‡∏ô‡πÄ‡∏ö‡∏£‡∏Å'
    },
    {
      name: '‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏£‡πå',
      icon: '‚ùÑÔ∏è',
      description: '‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ ‡∏ã‡πà‡∏≠‡∏° ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏¢‡∏≤‡πÅ‡∏≠‡∏£‡πå'
    },
    {
      name: '‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',
      icon: '‚ö°',
      description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏ñ'
    },
    {
      name: '‡∏ä‡πà‡∏ß‡∏á‡∏•‡πà‡∏≤‡∏á',
      icon: 'üî©',
      description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏•‡πà‡∏≤‡∏á ‡πÇ‡∏ä‡πâ‡∏Ñ ‡∏™‡∏õ‡∏£‡∏¥‡∏á'
    },
    {
      name: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏¢‡∏≤‡∏á',
      icon: 'üõû',
      description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏¢‡∏≤‡∏á ‡∏ñ‡πà‡∏ß‡∏á‡∏•‡πâ‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå'
    },
    {
      name: '‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà',
      icon: 'üîã',
      description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà'
    },
    {
      name: '‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô',
      icon: 'üå°Ô∏è',
      description: '‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏°‡πâ‡∏≠‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô'
    },
    {
      name: '‡πÄ‡∏Ñ‡∏•‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô',
      icon: 'üìù',
      description: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏•‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô'
    },
    {
      name: '‡∏ü‡∏¥‡∏•‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏à‡∏Å',
      icon: 'ü™ü',
      description: '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏ü‡∏¥‡∏•‡πå‡∏°‡∏Å‡∏£‡∏∞‡∏à‡∏Å'
    },
    {
      name: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á',
      icon: 'üîä',
      description: '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á'
    }
  ];

  const handleCarInfoChange = (field: string, value: string) => {
    setCarInfo(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const isFormComplete = () => {
    return (
      selectedService &&
      selectedDate &&
      selectedTime &&
      carInfo.brand &&
      carInfo.model &&
      carInfo.year &&
      carInfo.licensePlate &&
      carInfo.problemDescription &&
      userProfile // Add check for user profile
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-white">
      <div className="p-8 max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-8 text-purple-800 text-center">
          ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        </h1>

        {/* User Profile Section */}
        <div className="bg-white p-6 rounded-xl shadow-sm border border-purple-100 mb-8">
          <h2 className="text-xl font-bold mb-6 text-purple-800 flex items-center space-x-2">
            <User className="w-6 h-6" />
            <span>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á</span>
          </h2>
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-purple-800 mb-2">
                ‡∏ä‡∏∑‡πà‡∏≠
              </label>
              <input
                type="text"
                value={userProfile?.first_name || ''}
                disabled
                className="w-full p-3 rounded-lg border border-purple-200 bg-gray-50"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-purple-800 mb-2">
                ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
              </label>
              <input
                type="text"
                value={userProfile?.last_name || ''}
                disabled
                className="w-full p-3 rounded-lg border border-purple-200 bg-gray-50"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-purple-800 mb-2">
                ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
              </label>
              <input
                type="email"
                value={userProfile?.email || ''}
                disabled
                className="w-full p-3 rounded-lg border border-purple-200 bg-gray-50"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-purple-800 mb-2">
                ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
              </label>
              <input
                type="tel"
                value={userProfile?.phone || ''}
                disabled
                className="w-full p-3 rounded-lg border border-purple-200 bg-gray-50"
              />
            </div>
          </div>
        </div>

        {/* Car Information Section */}
        <div className="bg-white p-6 rounded-xl shadow-sm border border-purple-100 mb-12">
          <h2 className="text-xl font-bold mb-6 text-purple-800 flex items-center space-x-2">
            <Car className="w-6 h-6" />
            <span>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ</span>
          </h2>
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-purple-800 mb-2">
                ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏£‡∏ñ
              </label>
              <input
                type="text"
                value={carInfo.brand}
                onChange={(e) => handleCarInfoChange('brand', e.target.value)}
                className="w-full p-3 rounded-lg border border-purple-200 focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="‡πÄ‡∏ä‡πà‡∏ô Toyota, Honda"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-purple-800 mb-2">
                ‡∏£‡∏∏‡πà‡∏ô
              </label>
              <input
                type="text"
                value={carInfo.model}
                onChange={(e) => handleCarInfoChange('model', e.target.value)}
                className="w-full p-3 rounded-lg border border-purple-200 focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="‡πÄ‡∏ä‡πà‡∏ô Camry, Civic"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-purple-800 mb-2">
                ‡∏õ‡∏µ‡∏£‡∏ñ
              </label>
              <input
                type="text"
                value={carInfo.year}
                onChange={(e) => handleCarInfoChange('year', e.target.value)}
                className="w-full p-3 rounded-lg border border-purple-200 focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="‡πÄ‡∏ä‡πà‡∏ô 2023"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-purple-800 mb-2">
                ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
              </label>
              <input
                type="text"
                value={carInfo.licensePlate}
                onChange={(e) => handleCarInfoChange('licensePlate', e.target.value)}
                className="w-full p-3 rounded-lg border border-purple-200 focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏Ç 1234 ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û"
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-purple-800 mb-2">
                ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤
              </label>
              <textarea
                value={carInfo.problemDescription}
                onChange={(e) => handleCarInfoChange('problemDescription', e.target.value)}
                className="w-full p-3 rounded-lg border border-purple-200 focus:outline-none focus:ring-2 focus:ring-purple-500 min-h-[100px]"
                placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
              />
            </div>
          </div>
        </div>
          
        {/* Service Selection */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-12">
          {services.map((service) => (
            <div
              key={service.name}
              className={`p-6 rounded-xl cursor-pointer transition-all duration-300 hover:shadow-lg
                ${
                  selectedService === service.name
                    ? 'bg-purple-600 text-white shadow-purple-200'
                    : 'bg-white hover:bg-purple-50 border border-purple-100'
                }`}
              onClick={() => setSelectedService(service.name)}
            >
              <div className="space-y-2">
                <div className="flex items-center space-x-3">
                  <span className="text-2xl">{service.icon}</span>
                  <span className="font-medium">{service.name}</span>
                </div>
                <p className={`text-sm ${
                  selectedService === service.name ? 'text-purple-100' : 'text-gray-500'
                }`}>
                  {service.description}
                </p>
              </div>
            </div>
          ))}
        </div>

        {/* Date and Time Selection */}
        <div className="grid md:grid-cols-2 gap-8 mb-12">
          <div className="bg-white p-6 rounded-xl shadow-sm border border-purple-100">
            <label className="flex items-center space-x-2 text-purple-800 font-medium mb-3">
              <Calendar className="w-5 h-5" />
              <span>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</span>
            </label>
            <input
              type="date"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
              className="w-full p-3 rounded-lg border border-purple-200 focus:outline-none focus:ring-2 focus:ring-purple-500"
            />
          </div>
          <div className="bg-white p-6 rounded-xl shadow-sm border border-purple-100">
            <label className="flex items-center space-x-2 text-purple-800 font-medium mb-3">
              <Clock className="w-5 h-5" />
              <span>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤:</span>
            </label>
            <input
              type="time"
              value={selectedTime}
              onChange={(e) => setSelectedTime(e.target.value)}
              className="w-full p-3 rounded-lg border border-purple-200 focus:outline-none focus:ring-2 focus:ring-purple-500"
            />
          </div>
        </div>

        {/* Summary */}
        <div className="bg-white p-6 rounded-xl shadow-sm border border-purple-100 mb-8">
          <h2 className="text-xl font-bold mb-4 text-purple-800 flex items-center space-x-2">
            <CheckCircle className="w-6 h-6" />
            <span>‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</span>
          </h2>
          <div className="space-y-3 text-gray-600">
            <p className="flex justify-between">
              <span className="font-medium">‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á:</span>
              <span>{userProfile ? `${userProfile.first_name} ${userProfile.last_name}` : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}</span>
            </p>
            <p className="flex justify-between">
              <span className="font-medium">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:</span>
              <span>{userProfile?.phone || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}</span>
            </p>
            <p className="flex justify-between">
              <span className="font-medium">‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏£‡∏ñ:</span>
              <span>{carInfo.brand || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏'}</span>
            </p>
            <p className="flex justify-between">
              <span className="font-medium">‡∏£‡∏∏‡πà‡∏ô:</span>
              <span>{carInfo.model || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏'}</span>
            </p>
            <p className="flex justify-between">
              <span className="font-medium">‡∏õ‡∏µ‡∏£‡∏ñ:</span>
              <span>{carInfo.year || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏'}</span>
            </p>
            <p className="flex justify-between">
              <span className="font-medium">‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô:</span>
              <span>{carInfo.licensePlate || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏'}</span>
            </p>
            <p className="flex justify-between">
              <span className="font-medium">‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:</span>
              <span>{selectedService || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'}</span>
            </p>
            <p className="flex justify-between">
              <span className="font-medium">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</span>
              <span>{selectedDate || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'}</span>
            </p>
            <p className="flex justify-between">
              <span className="font-medium">‡πÄ‡∏ß‡∏•‡∏≤:</span>
              <span>{selectedTime || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'}</span>
            </p>
          </div>
        </div>

        {/* Submit Button */}
        <button
          className="w-full bg-purple-600 text-white py-4 rounded-xl font-medium text-lg
            transition-all duration-300 hover:bg-purple-700 focus:ring-4 focus:ring-purple-200
            disabled:opacity-50 disabled:cursor-not-allowed"
          disabled={!isFormComplete()}
        >
          ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        </button>
      </div>
    </div>
  );
}